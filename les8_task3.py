# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно,
# пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
# При этом скрипт завершается, сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
# только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число)
# и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.

class Exception:
    def __init__(self, *args):

        self.my_list = []

    def my_input(self):
        while True:
            try:
                val = int(input('Введите число и нажмите enter: '))
                self.my_list.append(val)
                print(f'Введенные значения: {self.my_list} \n')
            except:
                print(f'Ошибка. Необходимо ввести число. ')
                another_try = input(f'Введите число и нажмите enter: ')

                if another_try == 'A' or another_try == 'a':
                    print(try_except.my_input())
                elif another_try == 'Z' or another_try == 'z':
                    return f'Вы вышли'
                else:
                    return f'Вы вышли'


try_except = Exception(1)
print(try_except.my_input())
